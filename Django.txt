### Django:
	- it is external module in python,so that we have to install
	- it is web development framework coded in python.
	- while developing this django they followed a
	 design patter MVT.
### MVC:
	M - Model
		- it will store logics related database.
	V - View
		- it will store info rerlated 
		UI(User Interface)
	C - Controller
		- it will logics main logics 
### MVT:
	M - Model
		- it will store logics related database.
	V - View
		- it will works like a controller
	T - Template
		- it will store info rerlated 
		UI(User Interface)
### required softwares:
	- install django
		- to install django,you have 
		to run a cmd in command prompt
		``` pip install django ```
		or
		``` pip install django == versionofDJ` ``
		
	- install any toll(sublime,atom,pycharm,
			notepad++,visual studio)
### Project creation
	- we have to choose a project location.
	- then you have to open cmd from that project location.
	- to create a project we have to run cmd i.e
		``` django-ādmin startproject projectname```
		ex: django-admin startproject FirstProject
### run project
	- you have to open cmd from  inside project location.
	- then run a cmd to run your project server
		``` python manage.py runserver ```
	Python Version check:
	=====================
		=> python -V

	Pip Version check:
	==================
		=> pip --version

	Django Installation:
	====================
		=> pip install django [Updated Version]
		=> pip install django == versionnumber [Particular version]

	Django Version check:
	=====================
		=> django-admin --version
					(or)
		=> python [shell]
		=> import django
		=> django.get_version()

	Project Creation:
	=================
	-> Select Your drive where to create your project
	-> Creation
		=> django-admin startproject "projectname"

		=> django-admin startproject FirstProject
		=> FirstProject
			=> FirstProject [Admin App]
			=> manage.py [Services]

	Project Execution:
	==================
	-> You need to navigate where the manage.py exists
	-> Execution
		=> manage.py runserver
		=> python manage.py runserver
		=> By default the port number is 8000
	-> Changing of port number to a server
		=> manage.py runserver 1234 [User Defined Port numbers]
		=> python manage.py runserver 1234
	-> In Browser we need to pass the url as
		=> http://127.0.0.1:8000
		=> Local server => 127.0.0.1 => localhost
		=> localhost:8000

	-> Runserver
		=> db.sqlite3 => Database


	FirstProject [ Admin App ]:
	===========================
	- init -> Python interpreter to be considered as a python file
	- asgi -> Asynchronous GateWay Interface -> Web deployment
	- wsgi -> Web Socket GateWay Interface -> Web deployment
	- settings -> All Configurations can be done here [App,database,mail,messages]
	- urls -> You need to pass the urls here to access it 

	Manage.py:[Services]
	====================
		- startproject
		- runserver
		- startapp
		- shell
		- makemigrations
		- migrate
		- createsuperuser

	To break server: ctrl + c
	================
	UserApp Creation:
	=================
		=> manage.py startapp "appname"
		=> python manage.py startapp "appname"

		=> manage.py startapp FirstApp

	UserApp Files:
	==============
	- init -> Python interpreter to be considered as a python file
	- admin -> Database tables and fields => view => List
	- apps -> app configurations
	- models -> Database => Fields => Datatype => length
	- tests -> unit testing
	- views -> Logic are included

	First Step to run our own app:
	==============================
	- Settings.py
		=> INSTALLED_APPs =[
		'',
		'',
		'appname',
		]
	- own url
		=> urls.py
		urlpattern = [
		path('admin/',admin.site.urls),
		path('',modulename.functionname),
		]
	- path:
	=======
		path('urlname/',modulename.functionname,name="useredefinedname"),

	- own function in views.py
		=> 